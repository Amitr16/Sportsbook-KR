app = "goalserve-sportsbook-backend"
primary_region = "iad"

[build]
  dockerfile = "Dockerfile"

[env]
  FLASK_ENV = "production"
  IS_PRODUCTION = "true"
  IS_LOCAL = "false"
  HOST = "0.0.0.0"
  DEBUG = "false"
  PORT = "8080"
  # ensure env.local never overrides prod values on Fly
  IGNORE_ENV_LOCAL = "1"
  
  # Process type - will be overridden per process
  PROCESS_TYPE = "web"
  
  # Memory & cache management
  DISABLE_CACHE_WARMUP = "true"
  CACHE_TTL_SEC = "180"
  MAX_EVENTS_PER_SPORT = "2000"
  MEM_SOFT_LIMIT_MB = "1400"
  
  # Database pool settings - CONSERVATIVE per-process pools (scale horizontally)
  # Separate pools per process type for isolation
  
  # Web process: conservative pool size (30 per instance, scale via replicas)
  DB_WEB_POOL_MAX = "30"
  DB_POOL_MIN = "2"
  DB_CONN_TIMEOUT = "5"
  
  # Worker processes: small dedicated pools
  DB_WORKER_POOL_MAX = "5"
  
  # Legacy settings (backward compatibility)
  DB_MAX_CONN = "20"
  DB_IDLE_TIMEOUT = "60"
  DB_POOL_MAX = "20"
  DB_POOL_TIMEOUT = "5"
  DB_POOL_MAX_LIFETIME = "900"
  DB_POOL_MAX_IDLE = "300"
  
  # Apply to real connections via db_compat.py (options / keepalives)
  DB_CONNECT_TIMEOUT = "4"
  
  # Postgres guardrails (Phase 3)
  DB_STATEMENT_TIMEOUT = "3s"
  DB_IDLE_IN_TRANSACTION_TIMEOUT = "5s"
  DB_PREPARE_THRESHOLD = "0"
  
  # TCP keepalives (work with Fly NAT)
  DB_KEEPALIVES_IDLE = "30"
  DB_KEEPALIVES_INTERVAL = "10"
  DB_KEEPALIVES_COUNT = "3"
  
  # Gunicorn settings for memory optimization
  WEB_WORKERS = "1"
  WEB_THREADS = "1"
  GUNICORN_PRELOAD = "false"
  
  # Redis for distributed caching (Phase 2)
  # Set via: fly redis create
  # REDIS_URL will be set as a secret

[processes]
  web = "python run.py"
  worker_odds = "python -m src.prematch_odds_service"
  worker_settlement = "python -m src.bet_settlement_service"

# Process-specific environment variables
[env.worker_odds]
  PROCESS_TYPE = "worker_odds"

[env.worker_settlement]
  PROCESS_TYPE = "worker_settlement"

[http_service]
  internal_port = 8080
  force_https = true
  auto_start_machines = true
  auto_stop_machines = false
  min_machines_running = 2  # Phase 2: Horizontal scaling for high availability
  max_machines_running = 10  # Auto-scale up to 10 instances under load
  processes = ["web"]
  
  [http_service.concurrency]
    type = "requests"
    soft_limit = 40
    hard_limit = 60

[[checks]]
  name = "http"
  type = "http"
  interval = "15s"
  timeout = "3s"
  grace_period = "20s"
  [checks.http]
    path = "/healthz"

[[vm]]
  cpu_kind = "shared"
  cpus = 1
  memory_mb = 2048

[[mounts]]
  source = "goalserve_data"
  destination = "/app/data"
